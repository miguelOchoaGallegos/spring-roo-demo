// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.miguelo.examplelogin.web;

import com.miguelo.examplelogin.domain.Producto;
import com.miguelo.examplelogin.service.api.ProductoService;
import com.miguelo.examplelogin.web.ProductoesItemJsonController;
import io.springlets.web.NotFoundException;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;
import org.springframework.web.util.UriComponents;

privileged aspect ProductoesItemJsonController_Roo_JSON {
    
    declare @type: ProductoesItemJsonController: @RestController;
    
    declare @type: ProductoesItemJsonController: @RequestMapping(value = "/productoes/{producto}", name = "ProductoesItemJsonController", produces = MediaType.APPLICATION_JSON_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ProductoService ProductoesItemJsonController.productoService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param productoService
     */
    @Autowired
    public ProductoesItemJsonController.new(ProductoService productoService) {
        this.productoService = productoService;
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return ProductoService
     */
    public ProductoService ProductoesItemJsonController.getProductoService() {
        return productoService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param productoService
     */
    public void ProductoesItemJsonController.setProductoService(ProductoService productoService) {
        this.productoService = productoService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Producto
     */
    @ModelAttribute
    public Producto ProductoesItemJsonController.getProducto(@PathVariable("producto") Long id) {
        Producto producto = productoService.findOne(id);
        if (producto == null) {
            throw new NotFoundException(String.format("Producto with identifier '%s' not found",id));
        }
        return producto;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param producto
     * @return ResponseEntity
     */
    @GetMapping(name = "show")
    public ResponseEntity<?> ProductoesItemJsonController.show(@ModelAttribute Producto producto) {
        return ResponseEntity.ok(producto);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param producto
     * @return UriComponents
     */
    public static UriComponents ProductoesItemJsonController.showURI(Producto producto) {
        return MvcUriComponentsBuilder
            .fromMethodCall(
                MvcUriComponentsBuilder.on(ProductoesItemJsonController.class).show(producto))
            .buildAndExpand(producto.getId()).encode();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param storedProducto
     * @param producto
     * @param result
     * @return ResponseEntity
     */
    @PutMapping(name = "update")
    public ResponseEntity<?> ProductoesItemJsonController.update(@ModelAttribute Producto storedProducto, @Valid @RequestBody Producto producto, BindingResult result) {
        
        if (result.hasErrors()) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body(result);
        }
        producto.setId(storedProducto.getId());
        getProductoService().save(producto);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param producto
     * @return ResponseEntity
     */
    @DeleteMapping(name = "delete")
    public ResponseEntity<?> ProductoesItemJsonController.delete(@ModelAttribute Producto producto) {
        getProductoService().delete(producto);
        return ResponseEntity.ok().build();
    }
    
}
